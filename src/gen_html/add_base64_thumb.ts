import fs from "fs";
import path from "path";
import { TData } from "../types";

// PATHs
function get_paths(threadDir: string): string {
  const thumbnailDir = path.join(threadDir, "thumbnails");
  return thumbnailDir;
}
/**
 * Adds base64-encoded thumbnails to the `thumbnailBase64` property of each post in a given thread's data.
 * 
 * @note
 * Generated by ChatGPT - in the prompt, just mention the word expert or senior developer
 *
 * @function
 * @name add_base64_thumb
 *
 * @param {string} threadDir - The directory path of the thread.
 * @param {TData} data - The thread data object containing posts.
 *
 * @throws {Error} If there is an error reading thumbnail file or encountering a network error.
 *
 * @example
 * // Example usage of add_base64_thumb function
 * const threadDir = '/path/to/thread';
 * const data = // ... initialize data object
 * add_base64_thumb(threadDir, data);
 *
 * // This function mutates the `data` object by adding base64-encoded thumbnails to each post's `thumbnailBase64` property.
 *
 * @see {@link TData} for the structure of the data object
 * @see {@link get_paths} for getting thumbnail directory path
 * @see {@link fs.readFileSync} for reading thumbnail file
 */
export default function add_base64_thumb(threadDir: string, data: TData) {
  const thumbnailDir = get_paths(threadDir);

  data.posts.forEach((post) => {
    if (!post.image.title) return;
    const thumbnailFile =
      post.image.title
        .split(".")
        .slice(0, -1)
        .join(".")
        .replace(/[|@"<>\\\/?:*]/g, "-") +
      ` - ${post.post_id}` +
      " - thumbnail.jpg";

    const thumbnailPath = path.join(thumbnailDir, thumbnailFile);
    let numOfErrors = 0

    try {
      post.image.thumbnailBase64 = fs.readFileSync(thumbnailPath).toString("base64");
    } catch (err) { // Errors occurs if network error and thumbnail is not downloaded. Or maybe thumbnail file name has changed
      if ((err as NodeJS.ErrnoException)?.code === "ENOENT") {
        numOfErrors++
        // console.error("\x1b[31m%s\x1b[0m", "\n=========== CREATING HTML HANDLED ERRORS ===========");
        // console.error(`${thumbnailFile} not found`);
        return;
      }
      if (err) throw err;
    }
    if (numOfErrors !== 0) console.error("\x1b[31m%s\x1b[0m", `${numOfErrors} thumbnails not found - ${data.thread_title}`)
  });
}

// const data = JSON.parse(fs.readFileSync(path.join(__dirname, "data.json"), "utf-8"))

// add_base64_thumb("", data)
