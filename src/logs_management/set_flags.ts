import fs from "fs";
import { LEN_BOARD, LEN_DATE, LEN_HOST, LEN_IMAGE_COUNT, LEN_REPLY_COUNT, LEN_SIZE, LEN_THREAD_ID, LEN_TITLE } from "./consts";
import { ARCHIVE_PATH } from "../config/consts";
import format_log_line from "./format_log_line";

// const ARCHIVE_PATH = "path\\to\\data\\archive - Copy.txt"

type Setflag = (flagField: number) => (url: string) => void;
/**
 * Sets a flag on a specified thread in an archive file.
 * [This Documentation is generated by ChatGPT]
 * 
 * @param flagField - Index of the flag to set. (0-based)
 * @returns Returns an array with two elements:
 *   - First element (boolean) indicates whether the flag was set successfully.
 *   - Second element (object|null) contains an error message object if there was an error, otherwise null.
 * 
 * @example
 * // Set a "A" flag on a thread in the archive file
 * const set_archived_flag = set_flag(9); // 9 represents the flag index for "A"
 * const result = setFlag("https://boards.4channel.org/<board>/thread/<thread_id>");
 * console.log(result); // [true, null]
 * 
 * @remarks
 * This function performs the following steps:
 * 1. Checks if the archive file exists. If not, returns an error.
 * 2. Reads the archive file and splits it into lines.
 * 3. Maps each line to an array of fields by splitting on "|" and trimming the entries.
 * 4. Modifies the flag on the specified thread based on the flagField parameter.
 * 5. Formats the modified line into a log line.
 * 6. Writes the updated archive back to the file.
 */
const set_flag: Setflag = (flagField) => {
  return (url: string) => {
    if (!fs.existsSync(ARCHIVE_PATH)) return [null, { message: "archive file doesn't exist" }];
    const [schema, , host, board, thread, thread_id] = url.split("/"); // https://boards.4channel.org/<board>/thread/<thread_id>
    const archive_string = fs.readFileSync(ARCHIVE_PATH, "utf-8");

    // console.log(board,thread_id)
    // 1. save archive to memory
    // 2. cast archive from string to array , split archive lines by \n
    // Note on 2. each element of the array  is a line of the form "| 2023/01/06 | title | <board> | <thread_id> | host | 312 | 83 | 392 MB | F |"
    // 3. for each log line, split on "|", and trim
    // Ps on 3. each line now is a tuple of the form ["", "2023/01/06", "title", "<board>", "<thread_id>", "host", 312, 83, size, ""]
    // 4. search for the thread and remove it. hint: use index = 4 in the tuple from 3
    // 5. reconstruct log line
    // 6. write archive file. (Now it's without the outdated line)

    const new_archive = archive_string
      .split("\n") // cast archive from string to array , split archive lines by \n
      .slice(0, -1)
      .map((lineString) => lineString.split("|").map((entry) => entry.trim()))
      .map((line) => {
        const flags = line.slice(9, line.length - 1);
        const modifiedFlags: [string, number][] = [];
        flags.forEach((flag, idx) => {
          const flagIdx = 9 + idx;
          if (flagIdx !== flagField) return modifiedFlags.push([flag, 1]); // check if flag is not the intended flag
          if (!(line[4] === thread_id && line[3] === board)) return modifiedFlags.push([flag, 1]); // check the correct board
          modifiedFlags.push(["T", 1]);
        });

        // console.log(line)
        return format_log_line([
          [line[1], LEN_DATE],
          [line[2], LEN_TITLE],
          [line[3], LEN_BOARD],
          [line[4], LEN_THREAD_ID],
          [line[5], LEN_HOST],
          [line[6], LEN_REPLY_COUNT],
          [line[7], LEN_IMAGE_COUNT],
          [line[8], LEN_SIZE],
          ...modifiedFlags,
        ]);
      })
      .join("");
    // console.log(new_archive)
    fs.writeFileSync(ARCHIVE_PATH, new_archive);

    return [true, null];
    // return new_archive;
  };
};

export const set_update_flag = set_flag(10);
export const set_archived_flag = set_flag(9);
export const set_error_flag = set_flag(11)

// add_removed_flag("https://boards.4channel.org/<board>/thread/<thread_id>")
